# #BENCHMARKING (begin)
## set the trace prompt to include seconds, nanoseconds, script name and line number
#PS4='+$(date "+%s:%N") %N:%i> '
## save file stderr to file descriptor 3 and redirect stderr (including trace
## output) to a file with the script's PID as an extension
#exec 3>&2 2>/tmp/startlog.$$
## set options to turn on tracing and expansion of commands contained in the prompt
#setopt xtrace prompt_subst
#----------------------------------------------------------------------------

autoload -U compaudit compinit

# Check if zplug is installed
[[ -d ~/.zplug ]] || {
  git clone https://github.com/zplug/zplug ~/.zplug
  source ~/.zplug/init.zsh && zplug update --self
}

# Essential
source ~/.zplug/init.zsh

# Make sure to use double quotes
# zplug "zsh-users/zsh", nice:-20
zplug "zsh-users/zsh", nice:-1
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-history-substring-search"
zplug "zsh-users/zsh-syntax-highlighting", nice:10

# Grab binaries from GitHub Releases
# and rename with the "rename-to:" tag
zplug "junegunn/fzf-bin", from:gh-r, as:command, rename-to:fzf, use:"*darwin*amd64*"

# Group dependencies. Load emoji-cli if jq is installed in this example
# zplug "stedolan/jq", from:gh-r, as:command, rename-to:jq
# zplug "zplug/emoji-cli", if:"which jq"

# Supports oh-my-zsh plugins and the like
# zplug "themes/duellj", from:oh-my-zsh
# zstyle ':zplug:tag' from oh-my-zsh
zplug "lib/completion", from:oh-my-zsh
zplug "lib/clipboard", if:"[[ $OSTYPE == *darwin* ]]", from:oh-my-zsh
zplug "lib/directories", from:oh-my-zsh
zplug "lib/theme-and-appearance", from:oh-my-zsh
zplug "lib/spectrum", from:oh-my-zsh
zplug "lib/misc", from:oh-my-zsh
zplug "plugins/brew", if:"(( $+commands[brew] ))", from:oh-my-zsh
zplug "plugins/brew-cask", if:"(( $+commands[brew] ))", nice:10, from:oh-my-zsh
zplug "plugins/bundler", from:oh-my-zsh
zplug "plugins/capistrano", from:oh-my-zsh
zplug "plugins/cp", from:oh-my-zsh
zplug "plugins/colored-man", if:"(( $+commands[man] ))", from:oh-my-zsh
zplug "plugins/colorize", from:oh-my-zsh
zplug "plugins/common-aliases", nice:10, from:oh-my-zsh, ignore:oh-my-zsh.sh
zplug "plugins/dirpersist", from:oh-my-zsh
zplug "plugins/debian", if:"(( $+commands[dpkg] ))", from:oh-my-zsh
zplug "plugins/forklift", if:"(( $+commands[forklift] ))", from:oh-my-zsh
zplug "plugins/gem", if:"(( $+commands[gem] ))", from:oh-my-zsh
zplug "plugins/gnu-utils", from:oh-my-zsh
zplug "plugins/github", if:"(( $+commands[git] ))", from:oh-my-zsh
zplug "plugins/gitignore", if:"(( $+commands[git] ))", nice:10, from:oh-my-zsh
zplug "plugins/git", if:"(( $+commands[git] ))", nice:10, from:oh-my-zsh
zplug "plugins/npm", if:"(( $+commands[npm] ))", from:oh-my-zsh
zplug "plugins/rails", if:"(( $+commands[rails] ))", nice:10, from:oh-my-zsh
zplug "plugins/rsync", if:"(( $+commands[rsync] ))", from:oh-my-zsh
zplug "plugins/rvm", if:"(( $+commands[rvm] ))", nice:10, from:oh-my-zsh
zplug "plugins/ssh-agent", if:"[[ $OSTYPE == *darwin* ]]", from:oh-my-zsh
zplug "plugins/tmux", if:"(( $+commands[tmux] ))", nice:10, from:oh-my-zsh
zplug "plugins/urltools", from:oh-my-zsh
zplug "plugins/yum", if:"(( $+commands[yum] ))", from:oh-my-zsh
zplug "plugins/z", from:oh-my-zsh

# Can manage local plugins
# zplug "robbyrussell/oh-my-zsh", use:oh-my-zsh.sh, nice:-10
zplug "${HOME}/.dotfiles", \
  from:local, \
  use:"cyber-alanpeabody.zsh-theme", \
  as:plugin, \
  nice:19

# Install packages that have not been installed yet
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    else
        echo
    fi
fi

# Then, source plugins and add commands to $PATH
zplug load --verbose

if zplug check zplug/enhancd; then
  export ENHANCD_FILTER=fzf-tmux
fi

# unique these arrays
typeset -U path manpath

# Path to your oh-my-zsh configuration.
# ZSH=$HOME/.oh-my-zsh

# Nicer history
HISTSIZE=100000
SAVEHIST=$HISTSIZE
REPORTTIME=10
#WORDCHARS=${WORDCHARS//[&=\/;\!#%\{]}
WORDCHARS='*?_[]~=&;!#$%^(){}'
HISTFILE=~/.zsh_history

ZSH_THEME="cyber-alanpeabody"

# Uncomment following line if you want to disable autosetting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# zsh tmux plugin options
ZSH_TMUX_AUTOCONNECT=true
ZSH_TMUX_FIXTERM=true

bindkey -e
bindkey '\e[1;3C' forward-word
bindkey '\e[1;3D' backward-word
bindkey '\e\e[C' forward-word
bindkey '\e\e[D' backward-word

# History completion
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey '\e[A' history-beginning-search-backward-end
bindkey '\e[B' history-beginning-search-forward-end

# bind UP and DOWN arrow keys
# autoload -U up-line-or-beginning-search
# autoload -U down-line-or-beginning-search
# zle -N up-line-or-beginning-search
# zle -N down-line-or-beginning-search
# bindkey '\e[A' history-substring-search-up
# bindkey '\e[B' history-substring-search-down

export LESS="-FRmX"
unsetopt correctall

#unalias run-help
autoload -U run-help
autoload run-help-git
export HELPDIR=/usr/local/share/zsh/helpfiles

zstyle ':completion:*' group-name ''
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:descriptions' format '%d'
zstyle ':completion:*:options' verbose yes
zstyle ':completion:*:values' verbose yes
zstyle ':completion:*:options' prefix-needed yes

zstyle ':completion:*' use-cache true
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*' menu select
zstyle ':completion:*' keep-prefix
#zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*' completer _oldlist _complete _match _ignored \
    _approximate _list _history
#zstyle ':completion:*:match:*' original only
zstyle ':completion:*' matcher-list \
    '' \
    'm:{a-z}={A-Z}' \
    'l:|=* r:|[.,_-]=* r:|=* m:{a-z}={A-Z}'
zstyle ':completion:*:default' menu select=1
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'
zstyle ':completion:*:functions' ignored-patterns '_*'

zstyle ':completion:*:processes' command "ps -u $USER -o pid,stat,%cpu,%mem,cputime,command"

zstyle :omz:plugins:ssh-agent agent-forwarding on
zstyle :omz:plugins:ssh-agent identities id_rsa

# .ssh/config FTW!
h=()
if [[ -r ~/.ssh/config ]]; then
  h=($h $(awk '/^[hH]ost/ {for(i=2;i<=NF;++i) print $i}' .ssh/config))
fi
if [[ $#h -gt 0 ]]; then
  zstyle ':completion:*:ssh:*' hosts $h
  zstyle ':completion:*:slogin:*' hosts $h
fi

autoload zmv
alias mmv='noglob zmv -W'

autoload -U colors
colors

# autocomplete aliases
#compdef t=tmux
unset SCRIPT_NAME

alias ri='ri -Tf ansi'
alias rm='rm -I'
alias tis='tig status'
alias listen='lsof -i -P | grep LISTEN'
alias dockspaceleft='defaults write com.apple.dock persistent-apps -array-add '\''{tile-data={}; tile-type="spacer-tile";}'\''; killall Dock'
alias dockspaceright='defaults write com.apple.dock persistent-others -array-add '\''{tile-data={}; tile-type="spacer-tile";}'\''; killall Dock'
alias t='tmux -2u $*'
alias tree='tree -SA'
alias gd="git difftool --no-prompt --tool=mvimdiff"
alias reset_openwith="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user"
alias gs='git status -sb'
alias whatismyip='dig +short myip.opendns.com @resolver1.opendns.com'
alias vim='nvim'
unalias sr
alias od='od -Ax -tx1z'
alias hexdump='hexdump -C'
alias hexd=hexdump
alias where="command -v"
alias j="jobs -l"
alias mv='nocorrect mv'
alias cp='nocorrect cp'
alias mkdir='nocorrect mkdir'

# global aliases
alias -g A="| awk"
alias -g G="| grep"
alias -g GV="| grep -v"
alias -g H="| head"
alias -g L="| $PAGER"
alias -g P=' --help | less'
alias -g R="| ruby -e"
alias -g S="| sed"
alias -g T="| tail"
alias -g V="| vim -R -"
alias -g U=' --help | head'
alias -g W="| wc"

# suffix aliases
alias -s zip=zipinfo
alias -s tgz=gzcat
alias -s gz=gzcat
alias -s tbz=bzcat
alias -s bz2=bzcat
alias -s java=vim
alias -s c=vim
alias -s h=vim
alias -s C=vim
alias -s cpp=vim
alias -s php=vim
alias -s py=vim
alias -s rb=vim
alias -s txt=vim
alias -s xml=vim

# surfraw - bookmarks
fzf-surfraw() { surfraw "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sort -n | fzf -e)" }
fzf-locate() { open "$(locate "*" | fzf -e)"; }
alias bm='$EDITOR $HOME/.config/surfraw/bookmarks'

setopt auto_resume
setopt no_beep
setopt hist_ignore_dups
setopt hist_reduce_blanks
setopt extended_history
setopt hist_expand
setopt long_list_jobs
setopt magic_equal_subst
setopt mark_dirs
setopt no_menu_complete
setopt list_rows_first
setopt multios
setopt path_dirs
setopt print_eightbit
#setopt print_exit_value
setopt pushd_ignore_dups
setopt pushd_silent
setopt hist_no_store
setopt transient_rprompt
unsetopt promptcr
setopt hash_cmds
setopt numeric_glob_sort
setopt rm_star_wait
setopt auto_list
setopt auto_param_slash
setopt auto_param_keys
setopt list_types
setopt list_packed
setopt auto_cd
setopt auto_pushd
setopt pushd_minus
setopt pushd_ignore_dups
setopt complete_aliases
unsetopt hist_verify


setopt numericglobsort
setopt braceccl
#setopt noclobber
setopt extendedglob
setopt hist_ignore_space
setopt inc_append_history
setopt share_history
skip_global_compinit=1

zmodload zsh/mathfunc

# search on zshall man page
zman() {
  PAGER="less -g -s '+/^       "$1"'" man zshall
}

# save dirstack between sessions
DIRSTACKSIZE=9
DIRSTACKFILE=~/.zdirs
if [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then
  dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
  [[ -d $dirstack[1] ]] && cd $dirstack[1] && cd $OLDPWD
fi

[[ -s "${HOME}/.vim/bundle/tmux-config/tmux-autowrite/autowrite-vim.sh" ]] && source ${HOME}/.vim/bundle/tmux-config/tmux-autowrite/autowrite-vim.sh

#----------------------------------------------------------------------------
## BENCHMARKING (END)
## turn off tracing
#unsetopt xtrace
## restore stderr to the value saved in FD 3
#exec 2>&3 3>&-

# Add RVM to PATH for scripting
[[ -s "${HOME}/.rvm/bin" ]] && export PATH="$PATH:$HOME/.rvm/bin"
[[ -s "/usr/local/rvm/bin" ]] && export PATH="$PATH:/usr/local/rvm/bin"
[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
