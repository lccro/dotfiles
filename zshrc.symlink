# BENCHMARKING
# zmodload zsh/zprof
#----------------------------------------------------------------------------

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

## Interactive shell ##

skip_global_compinit=1
zmodload zsh/mathfunc
autoload -Uz compaudit compinit run-help
if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
  compinit;
else
  compinit -C;
fi

autoload -Uz run-help-git
export HELPDIR=/usr/local/share/zsh/helpfiles

# search on zshall man page
zman() { MANPAGER="less -g -s '+/^       "$1"'" man zshall }

autoload -Uz zmv
alias mmv='noglob zmv -W'

# unique these arrays
typeset -U path manpath

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Nicer history
HISTSIZE=100000
SAVEHIST=$HISTSIZE
REPORTTIME=10
#WORDCHARS=${WORDCHARS//[&=\/;\!#%\{]}
WORDCHARS='*?_[]~=&;!#$%^(){}'
HISTFILE=~/.zsh_history

# Uncomment following line if you want to disable autosetting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(
  cp colored-man-pages command-not-found common-aliases
  dirpersist
  gnu-utils github gitignore gpg-agent
  sudo ssh-agent
  z
)
[[ -x "/usr/local/bin/aws" ]]            && plugins+=(aws)
[[ -x "/usr/bin/yum" ]]                  && plugins+=(yum)
[[ -x "/usr/bin/dpkg" ]]                 && plugins+=(ubuntu)
[[ -x "/usr/bin/pacman" ]]               && plugins+=(archlinux)
[[ ( $commands[bundle] ) ]]              && plugins+=(bundler)
[[ ( $commands[fzf] ) ]]                 && plugins+=(fzf)
[[ ( $commands[docker] ) ]]              && plugins+=(docker)
[[ ( $commands[docker-compose] ) ]]      && plugins+=(docker-compose)
[[ ( $commands[gem] ) ]]                 && plugins+=(gem)
[[ ( $commands[git] ) ]]                 && plugins+=(git)
[[ ( $commands[go] ) ]]                  && plugins+=(golang)
[[ ( $commands[rails] ) ]]               && plugins+=(rails)
[[ ( $commands[rake] ) ]]                && plugins+=(rake-fast)
[[ ( $commands[rg] ) ]]                  && plugins+=(ripgrep)
[[ ( $commands[rsync] ) ]]               && plugins+=(rsync)
[[ ( $commands[ssh-agent] ) ]]           && plugins+=(ssh-agent)
[[ ( $commands[stack] ) ]]               && plugins+=(stack)
[[ ( $commands[tig] ) ]]                 && plugins+=(tig)
[[ ( $commands[tmux] ) ]]                && plugins+=(tmux)
[[ "$OSTYPE" = linux* ]]                 && plugins+=(systemd)
[[ "$OSTYPE" = darwin* ]]                && plugins+=(brew osx)

ZSH_THEME="powerlevel10k"

#---------------------------------------------------------------- load OMZ ---
[[ -s "$ZSH/oh-my-zsh.sh" ]] && source $ZSH/oh-my-zsh.sh
# unalias fd

# set these after omz
# export MANPAGER="sh -c 'col -bx | bat -l man -p'"
# export MANROFFOPT="-c"
export BAT_THEME="base16"
export BAT_STYLE="plain"
export LESSCHARSET=utf-8
export LESS="-FRmX"
export EDITOR=vim
# export TM_BUNDLE_SUPPORT="${HOME}/Library/Application Support/TextMate/Managed/Bundles/Ruby on Rails.tmbundle/Support"
# export CUCUMBER_FORMAT=progress
# export _JAVA_OPTIONS='-Dsun.java2d.opengl=true -Dawt.useSystemAAFontSettings=on'


# zshlovers(https://grml.org/zsh/zsh-lovers.html)
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'
zstyle ':completion:*:functions' ignored-patterns '_*'

# loadup ssh-agent (<3)
zstyle :omz:plugins:ssh-agent agent-forwarding on
zstyle :omz:plugins:ssh-agent identities id_rsa

# .ssh/config FTW!
if [[ -r ~/.ssh/config ]]; then
  h=($h $(awk '/^[hH]ost/ {for(i=2;i<=NF;++i) print $i}' ~/.ssh/config))
  if [[ $#h -gt 0 ]]; then
    zstyle ':completion:*:ssh:*' hosts $h
    zstyle ':completion:*:slogin:*' hosts $h
  fi
  unset h
fi

unset SCRIPT_NAME

#----------------------------------------------------------------- aliases ---

# TMUX
unalias t
alias t=tmux
compdef _tmux t

alias ls='ls --color=auto --group-directories-first'
alias ri='ri -Tf ansi'
alias rm='rm -I'
alias dockspaceleft='defaults write com.apple.dock persistent-apps -array-add '\''{tile-data={}; tile-type="spacer-tile";}'\''; killall Dock'
alias dockspaceright='defaults write com.apple.dock persistent-others -array-add '\''{tile-data={}; tile-type="spacer-tile";}'\''; killall Dock'
alias tree='tree -SA'
alias gd="git difftool --no-prompt --tool=mvimdiff"
alias gs='git status -sb'
alias od='od -Ax -tx1z'
alias hexdump='hexdump -C'
alias where="command -v"
alias mv='nocorrect mv -v'
alias cp='nocorrect cp -v'
alias mkdir='nocorrect mkdir'
alias burniso='hdiutil makehybrid -iso -joliet -o $1.iso $2'
alias ctop='docker run --rm -ti --name=ctop -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop:latest'
#[ -f /usr/local/bin/bat -o -f /bin/bat ] && alias cat='bat -pp'
[[ -x /usr/local/bin/lsd || -x /usr/bin/lsd ]] && alias ls='lsd --group-dirs=first'
[[ -x /usr/local/bin/emacs ]] && alias emacs='/usr/local/bin/emacs -nw $*'
[[ -x /usr/bin/fdfind ]] && alias fd='fdfind'

#---------------------------------------------------------- global aliases ---
alias -g A="| awk"
alias -g G="| grep"
alias -g GV="| grep -v"
alias -g H="| head"
alias -g L="| $PAGER"
alias -g P=' --help | less'
alias -g R="| ruby -e"
alias -g S="| sed"
alias -g T="| tail"
alias -g V="| vim -R -"
alias -g U=' --help | head'
alias -g W="| wc"
alias -g Z='| fzf'

#---------------------------------------------------------- suffix aliases ---
alias -s zip=zipinfo
alias -s tgz=gzcat
alias -s gz=gzcat
alias -s tbz=bzcat
alias -s bz2=bzcat
alias -s java=vim
alias -s c=vim
alias -s h=vim
alias -s C=vim
alias -s cpp=vim
alias -s php=vim
# alias -s py=vim
# alias -s rb=vim
alias -s txt=vim
alias -s xml=vim

#-------------------------------------------------------------- EMACS emul ---
bindkey -e
bindkey '\e[1;3C' forward-word
bindkey '\e[1;3D' backward-word
bindkey '\e\e[C' forward-word
bindkey '\e\e[D' backward-word

#------------------------------------------------------ History completion ---
autoload -Uz history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey '\eOA' up-line-or-beginning-search
bindkey '\eOB' down-line-or-beginning-search
bindkey '^P' up-line-or-beginning-search
bindkey '^N' down-line-or-beginning-search

# edit command line in $EDITOR
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

#---------------------------------------------------------------- ZSH opts ---
setopt auto_resume
setopt no_beep
setopt hist_ignore_dups
setopt hist_reduce_blanks
setopt extended_history
setopt hist_expand
setopt long_list_jobs
setopt magic_equal_subst
setopt mark_dirs
setopt no_menu_complete
setopt list_rows_first
setopt multios
setopt path_dirs
setopt print_eightbit
setopt pushd_ignore_dups
setopt pushd_silent
setopt hist_no_store
setopt transient_rprompt
setopt hash_cmds
setopt numeric_glob_sort
setopt rm_star_wait
setopt auto_list
setopt auto_param_slash
setopt auto_param_keys
setopt list_types
setopt list_packed
setopt auto_cd
setopt auto_pushd
setopt pushd_minus
setopt pushd_ignore_dups
#setopt complete_aliases
setopt numericglobsort
setopt braceccl
#setopt noclobber
setopt extendedglob
setopt HIST_IGNORE_SPACE
setopt inc_append_history
setopt share_history

unsetopt promptcr
unsetopt correctall
unsetopt hist_verify
unsetopt print_exit_value

#--------------------------------------------------------------------- FZF ---
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# Setting fd as the default source for fzf
# export FZF_DEFAULT_COMMAND='fd --type f'
export FZF_DEFAULT_COMMAND="fd --hidden --follow --exclude '.git' --exclude 'node_modules'"
export FZF_DEFAULT_OPTS="-m --cycle --preview '([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200'"

# for more info see fzf/shell/completion.zsh
_fzf_compgen_path() {
    fd . "$1"
}
_fzf_compgen_dir() {
    fd --type d . "$1"
}

# like normal z when used with arguments but displays an fzf prompt when used without.
unalias z 2> /dev/null
z() {
    [ $# -gt 0 ] && _z "$*" && return
    cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
}

# To apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# ALT-C's command
export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND --type d"

fzfrmimage() {
  docker image rm $(docker image ls | tail -n +2 | fzf | while read l; do echo $l | awk '{printf "%s:%s ", $1,$2}'; done)
}

#-----------------------------------------------------------------------------
listen() {
  lsof -nP -i":$1" | grep LISTEN
}

#-----------------------------------------------------------------------------
n ()
{
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    export FZF_DEFAULT_COMMAND='fdfind -t d'
    export NNN_PLUG='f:fzcd;o:fzopen;p:mocplay;d:diffs;t:nmount;v:preview-tui'

    nnn -A -Ra -Te -Pv "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

#------------------------------------------------------------ Base16 Shell ---
BASE16_SHELL="$HOME/.base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        eval "$("$BASE16_SHELL/profile_helper.sh")"

[[ -e ${HOME}/.dircolors ]] && eval $(dircolors -b $HOME/.dircolors)

#-------------------------------------------------------------- gcloud sdk ---
# The next line updates PATH for the Google Cloud SDK.
[[ -f "${HOME}/prj/google-cloud-sdk/path.zsh.inc" ]] && source "${HOME}/prj/google-cloud-sdk/path.zsh.inc"
# The next line enables shell command completion for gcloud.
[[ -f "${HOME}/prj/google-cloud-sdk/completion.zsh.inc" ]] && source "${HOME}/prj/google-cloud-sdk/completion.zsh.inc"

#------------------------------------------------------------------- pyenv ---
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

#------------------------------------------------------------- p10k prompt ---
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f $HOME/.p10k.zsh ]] && source $HOME/.p10k.zsh

#----------------------------------------------------------------------------
# BENCHMARKING (END)
# zprof

